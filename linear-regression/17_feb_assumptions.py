# -*- coding: utf-8 -*-
"""17_feb_Assumptions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18PgRHBCHkqM3Qci_HjAKNSsI3lrXtwlP
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')

dataset = pd.read_csv('ad.csv', index_col = 'Unnamed: 0')

dataset

X = dataset.drop('Sales', axis = 1)

X

y = dataset['Sales']

y

import statsmodels.api as sm

X_constant = sm.add_constant(X)

X_constant

model = sm.OLS(y, X_constant).fit()

model.summary()

# autocorrelation
# Durbin-Watson -----> 2.084 little autocorrelation

# Normality

sns.distplot(dataset['TV'])
plt.show()

dataset.describe()

sns.distplot(dataset['Radio'])
plt.show()

sns.distplot(dataset['Sales'])
plt.show()

q_qplot = sm.qqplot(model.resid,fit=True)

# linear relationship

plt.scatter(dataset['TV'],dataset['Sales'])
plt.xlabel('TV')
plt.ylabel('Sales')
plt.show()

plt.scatter(dataset['Newspaper'],dataset['Sales'])
plt.xlabel('Newspaper')
plt.ylabel('Sales')
plt.show()

# Homoscedasricity

import statsmodels.stats.api as sms

#Goldfled
sms.het_goldfeldquandt(model.resid,model.model.exog)

# middle value is P value
# H0: ypour data is Homoscedasticity
# 0.070 > 0.05 means we acceptiong hypothesis

# Multicolinearity

X

# correlation co-efficient
X.corr()

# VIF

from statsmodels.stats.outliers_influence import variance_inflation_factor

X

X.values

vif = [variance_inflation_factor(X.values, i) for i in range(3)]

vif

